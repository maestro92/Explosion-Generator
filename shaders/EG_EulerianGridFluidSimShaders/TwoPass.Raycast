#version 330

out vec4 FragColor;
in vec2 gTexCoord;

uniform sampler2D RayStartPoints;
uniform sampler2D RayStopPoints;
uniform sampler3D Density;
uniform sampler2D DepthMap;

uniform mat4 m_ModelviewProjection;

uniform vec3 LightIntensity = vec3(10.0);
uniform float Absorption = 1.0;

const float maxDist = sqrt(2.0);    
const int numSamples = 128;
const float stepSize = maxDist/float(numSamples);
const float densityFactor = 10;

int TestFlag = 1;

// http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real
float CalcDepthValue(vec3 Depth_Vertex)
{
    vec4 Clip_DepthPosition = m_ModelviewProjection * vec4(Depth_Vertex,1.0);
    float depthValue = Clip_DepthPosition.z / Clip_DepthPosition.w; // Depth in NDC coordinates
    return (depthValue + 1.0) * 0.5;    // Depth value in range [0,1], same range as the depth buffer
}


void main()
{
    // range [-1:1, -1:1, -1:1]
    vec3 rayStart = texture(RayStartPoints, gTexCoord).xyz;
    vec3 rayStop = texture(RayStopPoints, gTexCoord).xyz;
    float Regular_Depth = texture(DepthMap, gTexCoord.xy).r;

    if (rayStart == rayStop)
    {
        FragColor = vec4(0.2,0.2,0.2,0);
        return;
    }

    // converting from NDC[-1,1] to texture coordinates[0,1]
    rayStart = 0.5 * (rayStart + 1.0);
    rayStop = 0.5 * (rayStop + 1.0);

    vec3 pos = rayStart;
    vec3 step = normalize(rayStop-rayStart) * stepSize;
    float travel = distance(rayStop, rayStart);     // the depth each pixel will traverse
    float Transparency = 1.0;                       // transparency
    vec3 Color_0 = vec3(0.0);                       // iniital color
    vec3 d_pos;                                     // Depth position


    for (int i=0; i < numSamples && travel > 0.0; ++i, pos += step, travel -= stepSize) 
    {
        // grab the 3D texture density
        float density = texture(Density, pos).x * densityFactor;

        // change texture coord back to NDC coord
        d_pos = 2*pos - 1.0;

//************** if i want to debug
#if 0
        if(density > 0.000)
        {
            FragColor = vec4(0,pow(CalcDepthValue(d_pos),16),0,1);
            return; 
        }
#endif
//**************


        // we do our depth test
        if (TestFlag == 1)
        {
            // compare depth value of smoke with object depth
            if ( density > 0.000 && (Regular_Depth < CalcDepthValue(d_pos)))
            {
                FragColor = vec4(0.2,0.2,0.2,0);
                return; 
            }
            // if there are smoke in front of the Objects, we no longer do any depthTest
            else if (density > 0.000 && (Regular_Depth >= CalcDepthValue(d_pos)))
                TestFlag = 0;
        }
        else
        {
            // we check if we ever run into a sphere in the smoke
            if( Regular_Depth < CalcDepthValue(d_pos))
            {
                //  Transparency

                
                Color_0 += LightIntensity*density*stepSize * Transparency;
                
                Transparency *= 1.0-density*stepSize;
                if (Transparency <= 0.01)  break;

                FragColor.rgb = Color_0;
                FragColor.a = 1-Transparency;
                return;
            }
        }

        if (density <= 0.0) 
            continue;

        // Front to back transparency
        // use this for reference !!! http://graphics.ethz.ch/teaching/former/scivis_07/Notes/Handouts/03-raycasting.pdf

        Color_0 += LightIntensity*density*stepSize * Transparency;    // this is accumulating the colors


        // Composite Transparency value
        // so density*stepSize is like alpha, the higher density value, the higher alpha is,
        // the thicker the smoke, so less transparency
        Transparency *= 1.0-density*stepSize;

        // if the composite transparency falls below a threshold, we quit
        // since the color is no longer transparent, so it won't change much
        // because Transparency <= 0.01 means 1-Transparency >= 0.99
        if (Transparency <= 0.01)  break;
    }

    FragColor.rgb = Color_0;
    FragColor.a = 1-Transparency;   // 0 alpha value = full Transparency

  //  FragColor = vec4(1.0,0.0,0.0,1.0);
}



